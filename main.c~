#include <stdio.h>
#include <string.h>
#include <math.h>

#include "stack.h"

#define MAX_NAME_LEN 10

const char* names[] = {
  "sin",
  "cos",
  "tan",
  "exp",
  "pow"
};

int is_digit(char c) {
  return (c >= 48 && c <= 57);
}

int isoperator(char c) {
  return (c == '-' || c == '+' || c == '*' || c == '/' || c == '%' || c == '^');
}

int is_char(char c) {
  return (c >= 65 && c <= 90) || (c >= 97 && c <= 122);
}

double eval(double operand1, double operand2, char operator);

int getname(char name[], int start, char out[]) {
  int i = 0;

  while(name[start] != ' ' && name[start] != '\t' && name[start] != '\0' && name[start] != '(') {
    out[i] = name[start];
    ++start;
  }

  out[start++] = '\0';

  return start;
}

int main(int argc, char** argv) {
  if(argc == 2) {
    int i = 0;

    while(argv[1][i] != '\0') {
      if(is_char(argv[1][i])) {
	// check for names
      }
      else if((argv[1][i] == '-' && (i+1) < strlen(argv[1]) && is_digit(argv[1][i+1])) || is_digit(argv[1][i])) {
	double final = 0;
	int has_prec = 0, no_of_0 = 1, has_sign = 0;

	if(argv[1][i] == '-') {
	  ++i;
	  has_sign = 1;
	}

	while(argv[1][i] != ' ' && argv[1][i] != '\0' && argv[1][i] != '\t' && !isoperator(argv[1][i])) {
	  if(argv[1][i] == '.') {
	    has_prec = 1;
	    ++i;
	    continue;
	  }
	  final = (final*10) + (argv[1][i] - '0');
	  if(has_prec) {
	    no_of_0 *= 10;
	  }
	  ++i;
	}
	
	if(has_prec) {
	  final /= no_of_0;
	  has_prec = 0;
	}

	if(has_sign) {
	  final *= -1;
	}

	push(final);
      }
      else if(isoperator(argv[1][i])) {
	double operand1 = pop();
	double operand2 = pop();
	double result = eval(operand2, operand1, argv[1][i]);
	push(result);
      }
      ++i;
    }

    fprintf(stdout, "Result = %0.2f\n", pop());
  }
  else {
    fprintf(stderr, "Usage: %s 2 1 -\n", argv[0]);
    return 1;
  }

  return 0;
}

double eval(double operand1, double operand2, char operator) {
  switch(operator) {
  case '-':
    return operand1 - operand2;
  case '+':
    return operand1 + operand2;
  case '*':
    return operand1 * operand2;
  case '/':
    return operand1 / operand2;
  case '%':
    return ((int)operand1) % ((int)operand2);
  case '^':
    return pow(operand1, operand2);
  default:
    return 0;
  }
}
